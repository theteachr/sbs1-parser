use std::marker::PhantomData;
use chrono::NaiveDateTime;

enum MessageKind {
    /// TRANSMISSION MESSAGE: Generated by the aircraft. There are eight
    /// different MSG types (`TransmissionKind`).
    Msg,
    /// SELECTION CHANGE MESSAGE: Generated when the user changes the selected
    /// aircraft in BaseStation.
    Sel,
    /// NEW ID MESSAGE: Generated when an aircraft being tracked sets or changes
    /// its callsign.
    Id,
    /// NEW AIRCRAFT MESSAGE: Generated when the SBS picks up a signal for an
    /// aircraft that it isn't currently tracking.
    Air,
    /// STATUS CHANGE MESSAGE: Generated when an aircraft's status changes
    /// according to the time-out values in the Data Settings menu.
    Sta,
    /// CLICK MESSAGE: Generated when the user double-clicks (or presses return)
    /// on an aircraft (i.e. to bring up the aircraft details window).
    Clk,
}

enum TransmissionKind {
    EsIdentificationAndCategory,
    EsSurfacePosition,
    EsAirbornePosition,
    EsAirborneVelocity,
    SurveillanceAlt,
    SurveillanceId,
    AirToAir,
    AirCallReply,
}

struct Id<T>(PhantomData<T>);

struct Session;
struct Aircraft;
struct Flight;

enum Digit {
    Zero,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,
}

struct EsIdentificationAndCategory {
    /// An eight digit Flight ID - can be flight number or registration (or even nothing)
    callsign: Option<[Digit; 8]>,
}

struct EsSurfacePosition {
    /// Mode C altitude (height relative to 1013.2mb) (Flight Level) (not height AMSL)
    altitude: String,
    /// Speed over ground (not indicated airspeed)
    ground_speed: String,
    /// Track of aircraft (not heading) (derived from the velocity E/W and velocity N/S)
    track: String,
    /// North and East positive, South and West negative
    latitude: String,
    /// North and East positive, South and West negative
    longitude: String,
    /// Flag to indicate ground squat switch is active
    is_on_ground: bool,
}

struct EsAirbornePosition {
    /// Mode C altitude (height relative to 1013.2mb) (Flight Level) (not height AMSL)
    altitude: String,
    /// North and East positive, South and West negative
    latitude: String,
    /// North and East positive, South and West negative
    longitude: String,
    /// Flag to indicate squawk has changed.
    alert_squawk_change: bool,
    /// Flag to indicate emergency code has been set
    emergency: bool,
    /// Flag to indicate transponder Ident has been activated.
    ident: bool,
    /// Flag to indicate ground squat switch is active
    is_on_ground: bool,
}

struct EsAirborneVelocity {
    /// Speed over ground (not indicated airspeed)
    ground_speed: String,
    /// Track of aircraft (not heading) (derived from the velocity E/W and velocity N/S)
    track: String,
    /// 64ft resolution
    vertical_rate: String,
}

struct SurveillanceAlt {
    /// Mode C altitude (height relative to 1013.2mb) (Flight Level) (not height AMSL)
    altitude: String,
    /// Flag to indicate that transponder Ident has been activated
    ident: bool,
    /// Flag to indicate that ground squat switch is active
    is_on_ground: bool,
    /// Flag to indicate squawk has changed
    alert_squawk_change: bool,
}

struct SurveillanceId {
    /// Mode C altitude (height relative to 1013.2mb) (Flight Level) (not height AMSL)
    altitude: String,
    /// Assigned Mode A squawk code
    squawk: String,
    /// Flag to indicate squawk has changed
    alert_squawk_change: bool,
    /// Flag to indicate that emergency code has been set
    emergency: bool,
    /// Flag to indicate that transponder Ident has been activated
    ident: bool,
    /// Flag to indicate that ground squat switch is active
    is_on_ground: bool,
}

struct AirToAir {
    /// Mode C altitude (height relative to 1013.2mb) (Flight Level) (not height AMSL)
    altitude: String,
    /// Flag to indicate that ground squat switch is active
    is_on_ground: bool,
}

struct AirCallReply {
    /// Flag to indicate that ground squat switch is active
    is_on_ground: bool,
}

struct Message {
    /// Database Session record number
    session_id: Id<Session>,
    /// Database Aircraft record number
    aircraft_id: Id<Aircraft>,
    /// Aircraft Mode S hexadecimal code
    hex_ident: u64,
    /// Database Flight record number
    flight_id: Id<Flight>,
    /// Time when the message was generated
    message_generated_ts: NaiveDateTime,
    /// Time when the message was logged
    message_logged_ts: NaiveDateTime,
}
